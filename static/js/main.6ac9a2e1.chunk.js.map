{"version":3,"sources":["Card/Card.js","Movies/Movies.js","apiCalls.js","SingleMovie/SingleMovie.js","App/App.js","reportWebVitals.js","index.js"],"names":["Card","props","to","id","title","className","src","posterPath","alt","averageRating","toFixed","releaseDate","Movies","handleChange","event","setState","searchInput","target","value","moviesResults","state","movies","formatSearchInput","lowerCaseInput","toLowerCase","charAt","toUpperCase","slice","handleSubmit","preventDefault","inputTitle","filteredMovies","filter","movie","includes","length","movieResults","alert","resetSearch","error","fetch","then","response","json","data","catch","message","array","map","poster_path","backdropPath","backdrop_path","average_rating","release_date","movieCards","this","createMovieCards","type","placeholder","onChange","required","onClick","Component","SingleMovie","movieID","tagline","overview","genres","join","revenue","runtime","App","rel","href","path","render","match","params","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","router","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6ac9a2e1.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './Card.css'\n\nconst Card = (props) => {\n  return (\n    <Link to={`/movies/${props.id}`}>\n      <section title={ props.title } className=\"card\">\n        <img className=\"card-image\" src={ props.posterPath } alt=\"card-img\"/>\n        <h2>{ props.title }</h2>\n        <p>Average Rating: { (props.averageRating * 10).toFixed(0) }%</p>\n        <p>Released: { props.releaseDate}</p>\n      </section>\n    </Link>\n  )\n}\n\nexport default Card;","import React, { Component } from 'react'\nimport { getAllMovies } from '../apiCalls.js'\nimport './Movies.css'\nimport Card from '../Card/Card.js'\n\nclass Movies extends Component {\n  constructor() {\n    super()\n    this.state = {\n      movies: [],\n      movieResults: [],\n      searchInput: \"\",\n      error: null\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({ searchInput: event.target.value, moviesResults: this.state.movies })\n  }\n\n  formatSearchInput = () => {\n    let lowerCaseInput = this.state.searchInput.toLowerCase()\n    let formattedInput = lowerCaseInput.charAt(0).toUpperCase() + lowerCaseInput.slice(1)\n    return formattedInput\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n    let inputTitle = this.formatSearchInput()\n    let filteredMovies = this.state.movies.filter(movie => {\n      return movie.title.includes(inputTitle)\n    })\n    if (!filteredMovies.length) {\n      alert(\"No results match this search\")\n    } else {\n      this.setState({ movieResults: filteredMovies })\n    }\n    this.setState({ searchInput: \"\" })\n  }\n\n  resetSearch = (event) => {\n    this.setState({ movieResults: this.state.movies })\n  }\n\n  componentDidMount() {\n    getAllMovies()\n    .then(data => this.setState({movies: data.movies}))\n    .catch(error => this.setState({ error: error.message}))\n  }\n\n  createMovieCards(array) {\n    let movieCards = array.map(movie => {\n      return (\n        <Card\n        id = { movie.id }\n        posterPath = { movie.poster_path }\n        backdropPath = { movie.backdrop_path }\n        title = { movie.title }\n        averageRating = { movie.average_rating }\n        releaseDate = { movie.release_date }\n        key = { movie.id }\n        />\n      )\n    })\n    return movieCards\n  }\n\n  render() {\n    let movieCards;\n    if (!this.state.movieResults.length) {\n      movieCards = this.createMovieCards(this.state.movies)\n    } else {\n      movieCards = this.createMovieCards(this.state.movieResults)\n    }\n    \n    return (\n      <section>\n        <section className=\"search-bar\">\n          <div className=\"tb\">\n            <div className=\"td\">\n              <input type=\"text\" placeholder=\"Search\" value={ this.state.searchInput } onChange={ this.handleChange } required></input>\n            </div>\n            <div className=\"td\" id=\"s-cover\">\n              <button className=\"button\" title=\"submit\" onClick={ this.handleSubmit }>\n                <div id=\"s-circle\"></div>\n                <span></span>\n              </button>\n            </div>\n          </div>\n        </section>\n        <section className=\"search-details\">\n            <button className=\"clear-button\" onClick={this.resetSearch}>Clear Search</button>\n            <h3>Search Results: { this.state.movieResults.length ? this.state.movieResults.length : this.state.movies.length } Movies</h3>\n        </section>\n        <section className=\"movies-container\">\n          { movieCards }\n        </section>\n      </section>\n    )\n  }\n}\n\nexport default Movies;","// import axios from 'axios'\n// // import React from 'react'\n\n// export const getAllMovies = async () => {\n  \n//   const allMovies = await axios.get('https://rancid-tomatillos.herokuapp.com/api/v2/movies')\n//   // console.log(allMovies.data.movies)\n//   return allMovies.movies\n// }\n\nexport const getAllMovies = () => {\n  return (\n    fetch('https://rancid-tomatillos.herokuapp.com/api/v2/movies')\n    .then(response => response.json())\n  )\n}\n\nexport const getCurrentMovie = (id) => {\n  return (\n    fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/movies/${id}`)\n    .then(response => response.json())\n  )\n}","import React, { Component } from 'react';\nimport './SingleMovie.css'\nimport { getCurrentMovie } from '../apiCalls.js'\nimport { Link } from 'react-router-dom'\n\nclass SingleMovie extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            movie: null,\n            error: null\n        }\n    }\n\n    componentDidMount() {\n        getCurrentMovie(this.props.movieID)\n        .then(data => this.setState({ movie: data.movie }))\n        .catch(error => this.setState({ error: error.message}))\n    }\n\n    render() {\n        const { movie } = this.state\n        return(\n            <section className=\"single-movie\">\n                { movie && \n                    <>\n                        <h2 className=\"title\">{ movie.title }</h2>\n                        <p><em>{ movie.tagline }</em></p>\n                        <img className=\"single-image\" src={ movie.backdrop_path } alt=\"single-movie\"/>\n                        <p>{ movie.overview }</p>\n                        <p>Average Rating: { (movie.average_rating * 10).toFixed(0) }%</p>\n                        <p>Genre: { movie.genres.join(', ') }</p>\n                        <p>Revenue: ${ (movie.revenue / 1000000).toFixed(2) }M</p>\n                        <p>Runtime: { movie.runtime } mins</p>\n                        <Link to=\"/\" >\n                            <button className=\"button-return\">Back to Home</button>\n                        </Link>\n                    </>\n                }\n            </section>\n        )\n    }\n}\n\nexport default SingleMovie;","import React, { Component } from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport './App.css';\nimport Movies from '../Movies/Movies.js'\nimport SingleMovie from '../SingleMovie/SingleMovie.js'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = { \n      error: ''\n     }\n  }\n\n  render() {\n    return (\n    <main className=\"App\">\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\"></link>\n      <link href=\"https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap\" rel=\"stylesheet\"></link>\n      <h1>Rancid Tomatillos</h1>\n      <Switch>\n      <Route \n        path=\"/movies/:id\" \n        render={ ({match}) => {\n          const { id } = match.params\n          return <SingleMovie movieID={ id } />\n        }}\n      />\n      <Route exact path=\"/\" render={ () => {\n        return (\n          <Movies  />\n        )}} \n      />\n      <Route render={ () => {\n        return (\n          <h2>This page does not exist</h2>\n        )\n      }}\n      />\n      </Switch>\n    </main>\n  )}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst router = <BrowserRouter> <App /> </BrowserRouter>\n\nReactDOM.render(\n  router,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}